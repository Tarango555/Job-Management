1. Creating Main Structure: [Delete this .txt file if not needed]
    - Create workingFlow.txt file
    - Install node.js
    - Add "type": "module" under the "main": "index.js" [This allows us to use modern JavaScript features like "import" and "export" instead of require and module.exports.]
    - Add packages:
        1. Express.js:
            - express: Core framework for building the Node.js backend
            - express-rate-limit: For rate-limiting requests to your server (security)
            - helmet: Helps secure Express apps by setting various HTTP headers
            - cors: Enables Cross-Origin Resource Sharing, especially when your frontend and backend are on different domains
            - cookie-parser: For handling cookies in requests

        2. MongoDB & Mongoose:
            - mongoose: ODM (Object Data Modeling) library for MongoDB, making database interactions easier
            - mongodb: Native MongoDB driver, used when you donâ€™t want to use Mongoose

        3. Authentication & Authorization:
            - jsonwebtoken (JWT): For creating and verifying JSON Web Tokens (JWTs) for user authentication
            - bcryptjs or argon2: For password hashing
            - passport (optional): For more advanced authentication, like OAuth

        4. Validation:
            - joi or express-validator: For validating incoming data (e.g., request body, params)

        5. Utilities:
            - dotenv: To manage environment variables in a .env file
            - nodemailer: For sending emails (e.g., verification emails, password resets)
            - multer: For handling file uploads
            - uuid: For generating unique IDs

        6. Error Handling & Logging:
            - winston or morgan: For logging errors and requests
            - http-errors: To handle HTTP-specific error creation

        7. Development Tools:
            - nodemon: For automatically restarting the server when files change during development
            - concurrently: To run both the frontend and backend simultaneously with one command
            - jest or mocha/chai: For unit testing and integration testing

        8. Security:
            - express-mongo-sanitize: Prevents MongoDB operator injection
            - xss-clean: To sanitize user input from XSS attacks
            - hpp: Prevent HTTP parameter pollution
    - Folders and Files

2. How to use:
    -> Download MERN_backend_structure from my github
    -> install node_modules using 'npm install' and run using 'nodemon app.js' for resting purpose
    -> 'mern-x' is the mongodb database to practice this demo structure
    -> Open postman and give the data according to StudentProfilesModel.js

3. Connect backend and frontend:

    -> in client directory, go to vite.config.js and add:
        ->  import { defineConfig } from 'vite'
            import react from '@vitejs/plugin-react'

            // https://vite.dev/config/
            export default defineConfig({
            plugins: [react()],
            server: {
                proxy: {
                '/api/': {
                    target: 'http://localhost:5050',
                }
                }
            }
            })

    -> type this command to add a dist folder to frontend:
        > npm run build

    -> now go to app.js in backend and set the location of this 'dist' folder:

        //set the location of 'dist' folder form frontend
        app.use(express.static('client/dist'));

        //add react frontend routing
        app.get('*', function(req, res){
            res.sendFile(path.resolve(__dirname, 'client', 'dist', 'index.html'))
        });

4. To deploy the project to vercel:

    -> Create a file named 'vercel.json' and place it to root directory of backend and frontend.

    -> In backend vercel file, add these codes:
        {
            "version": 2,
            "builds": [
                {
                    "src": "app.js",
                    "use": "@vercel/node"
                }
            ],
            "routes": [
                {
                    "src": "/(.*)",
                    "destination": "app.js"
                }
            ]
        }

    -> In frontend vercel file, add these codes:
        {
            "rewrites": [
                {
                    "source": "/(.*)",
                    "destination": "/index.html"
                }
            ]
        }

    -> open package.json from backend:
        -> add "main": "index.js"
        -> add in scripts:
            "start": "node index.js"

    -> Create a new repository in github and add this project folder to the repo:

        -> open project folder-
            git init
            git add .
            git commit -m "Initial commit"
            git branch -M main
            git remote add origin https://github.com/Tarango555/job-portal.git
            git push -u origin main

    -> go to vercel website and deploy this project:

        -> install git into vercel only for the first time.
        -> then import the desired project.
        -> if both backend and frontend are connected to each other (we did it already),
           then add project and just click deploy. 
        -> if not connected, separately deploy them. first backend, then change the directory to 'client' and deploy.
        -> 
        -> 

5. WorkFlow:
    -> ResponsiveNavbar_02.jsx [Login button]
    -> 
    -> 
    -> 
    -> 
    -> 
    -> 
    -> 
    -> 
    -> 
    -> 